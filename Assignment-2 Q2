class PrefixSumCalculator {
    // Array to store the original numbers
    private int[] numbers;    
    // Array to store the prefix sums
    private int[] prefixSums;
    // Constructor to initialize the calculator with an array of numbers
    public PrefixSumCalculator(int[] numbers) {
        this.numbers = numbers;
        this.prefixSums = new int[numbers.length];
        calculatePrefixSums(); // Call method to compute prefix sums
    }
    // Method to calculate the prefix sums from the original array
    private void calculatePrefixSums() {
        // Initialize the first element of prefix sums
        prefixSums[0] = numbers[0];
        // Loop through the numbers to compute the prefix sums
        for (int i = 1; i < numbers.length; i++) {
            // Each prefix sum is the sum of the current number and the previous prefix sum
            prefixSums[i] = prefixSums[i - 1] + numbers[i];
        }
    }
    // Method to get the prefix sum up to a specific index
    public int getPrefixSum(int index) {
        // Return the prefix sum at the specified index
        return prefixSums[index];
    }
    // Method to get the sum of elements between two indices (inclusive)
    public int getRangeSum(int start, int end) {
        // If start is 0, return the prefix sum at end
        if (start == 0) {
            return prefixSums[end];
        }
        // Otherwise, return the difference of prefix sums
        return prefixSums[end] - prefixSums[start - 1];
    }
}
