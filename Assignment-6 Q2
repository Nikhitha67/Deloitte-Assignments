import java.util.*; // Importing the utility package for using Map and other collections
public class LongestSubstringMap { // Declaring the class LongestSubstringMap
    // Method to find the length of the longest substring without repeating characters
    public static int lengthOfLongestSubstring(String s) {
        Map<Character, Integer> charIndex = new HashMap<>(); // Map to store the last index of each character
        int left = 0, maxLength = 0; // Initialize left pointer and max length   
        // Iterate through the string using a right pointer
        for (int right = 0; right < s.length(); right++) {
            // If the character is already in the map, move the left pointer
            if (charIndex.containsKey(s.charAt(right))) {
                left = Math.max(charIndex.get(s.charAt(right)) + 1, left);
            }
            // Update the last index of the character
            charIndex.put(s.charAt(right), right);
            // Calculate the maximum length of the substring found so far
            maxLength = Math.max(maxLength, right - left + 1);
        }   
        return maxLength; // Return the maximum length of the substring
    }
    public static void main(String[] args) {
        String s = "abcabcbb"; // Sample input string
        System.out.println(lengthOfLongestSubstring(s));  // Output: 3
    }
}
